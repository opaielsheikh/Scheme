#lang racket
;; closure example:
(define bankAccount
  (lambda(Name Val) ;; outer lambda
     (lambda Action ;; inner lambda
       (cond ((equal? (car Action) 'name)                    Name                          )
             ((equal? (car Action) 'value)                    Val                          )
             ((equal? (car Action) 'deposit)      (bankAccount Name (+ Val (cadr Action))) )
             ((equal? (car Action) 'withdraw)     (bankAccount Name (- Val (cadr Action))) )
             (               #t                         (bankAccount Name Val)             )
))))


;; bankAccount is another function generated by the inner lambda
;; that holds the content of Name and  Val.
;; looks at the action variable and decides various responses.
;; 1st cond: if the first thing in the action list of variables is equal to the word name,
;; then return the value of the name variable.
;; 3rd cond: if the first thing in the action list of variables is equal to the word deposit,
;; then return a new bank account with the same name but with the value equal to the
;; current value + second thing in the input (cadr = first thing in the rest of the action).
;; 4th cond: return the bank account without any changes.
